
provider.tf
----------------------------------------------

provider "aws" {
  region     = "ap-south-1"
  access_key = "AKIAZRIJIKRDXLQLJZHF"
  secret_key = "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"
}

----------------------------------------------------------------------------------------------

#variable.tf:

 variable "ami_id" {

  description = "ami id of amazon linux"
  type        = string
  default     = "ami-0c768662cc797cd75"

}

variable "instance_type" {

  description = "ec2 instance type"
  type        = string
  default     = "t2.micro"
}

variable "project_name" {
  description = "your project name"
  type        = string
  default     = "zomato"
}
 
 
variable "project_environment" {
  description = "project environment"
  type        = string
  default     = "prod"
}
variable "vpc_cidr" {
  default = "172.16.0.0/16"
}
------------------------------------------------------------------------------------------
#datasource.tf: to fetch the az
------------------------------------------------------------------------------------------ 
data "aws_availability_zones" "az" {
  state = "available"
}
----------------------------------------------------------------
 
# main.tf:
----------------------------------------------------------------------------------- 
#creating vpc
 
resource "aws_vpc" "main" {
  cidr_block           = var.vpc_cidr
  instance_tenancy     = "default"
  enable_dns_support   = true
  enable_dns_hostnames = true
  tags = {
    Name = "${var.project_name}-${var.project_environment}"
 
  }
}
 
# creating internet gateway
 
resource "aws_internet_gateway" "igw" {
  vpc_id = aws_vpc.main.id
  tags = {
    Name = "${var.project_name}-${var.project_environment}",
 
  }
}
 
 
# creating public subnets using count
 
resource "aws_subnet" "public_subnets" {
  count                   = 3
  vpc_id                  = aws_vpc.main.id
  cidr_block              = cidrsubnet(var.vpc_cidr, 3, count.index)
  availability_zone       = data.aws_availability_zones.az.names["${count.index}"]
  map_public_ip_on_launch = true
  tags = {
    Name = "${var.project_name}-${var.project_environment}-public-${count.index + 1}"
 
 
  }
}
 
 
# creating private subnets using count
 
resource "aws_subnet" "private_subnets" {
  count                   = 3
  vpc_id                  = aws_vpc.main.id
  cidr_block              = cidrsubnet(var.vpc_cidr, 3, count.index + 3)
  availability_zone       = data.aws_availability_zones.az.names["${count.index}"]
  map_public_ip_on_launch = true
  tags = {
    Name = "${var.project_name}-${var.project_environment}-private-${count.index + 1}"
 
 
  }
}

#elastic ip for NAT

resource "aws_eip" "nat" {
  vpc = true
  tags = {
    Name = "${var.project_name}-${var.project_environment}-nat"

  }
}

#natgateway

resource "aws_nat_gateway" "nat" {
  allocation_id = aws_eip.nat.id
  subnet_id     = aws_subnet.public_subnets[0].id
  tags = {
    Name = "${var.project_name}-${var.project_environment}"

  }
  depends_on = [aws_internet_gateway.igw]
}

#creating public route table

resource "aws_route_table" "public" {

  vpc_id = aws_vpc.main.id
  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.igw.id
  }
  tags = {
    Name = "${var.project_name}-${var.project_environment}-public"

  }
}


#creating private route table

resource "aws_route_table" "private" {

  vpc_id = aws_vpc.main.id
  route {
    cidr_block     = "0.0.0.0/0"
    nat_gateway_id = aws_nat_gateway.nat.id
  }
  tags = {
    Name = "${var.project_name}-${var.project_environment}-private"

  }
}

# public route table association

resource "aws_route_table_association" "pub_subnet" {
  count          = 3
  subnet_id      = aws_subnet.public_subnets["${count.index}"].id
  route_table_id = aws_route_table.public.id
}
 
#private route table association

resource "aws_route_table_association" "pri_subnet" {
  count          = 3
  subnet_id      = aws_subnet.private_subnets["${count.index}"].id
  route_table_id = aws_route_table.private.id
}


# creating sg for bastion

resource "aws_security_group" "bastion" {
  name_prefix = "${var.project_name}-${var.project_environment}-bastion"
  description = "allow ssh from myip"
  vpc_id      = aws_vpc.main.id
  ingress {

    from_port        = 22
    to_port          = 22
    protocol         = "tcp"
    cidr_blocks      = ["0.0.0.0/0"]
    ipv6_cidr_blocks = ["::/0"]
  }

  egress {
    from_port        = 0
    to_port          = 0
    protocol         = "-1"
    cidr_blocks      = ["0.0.0.0/0"]
    ipv6_cidr_blocks = ["::/0"]
  }

  tags = {
    "Name" = "${var.project_name}-${var.project_environment}-bastion"
  }
  lifecycle {
    create_before_destroy = true
  }
}

# create frondend sg

resource "aws_security_group" "frontend" {
  name_prefix = "${var.project_name}-${var.project_environment}-frontend"
  description = "allow ssh, http, https"
  vpc_id      = aws_vpc.main.id
  ingress {

    from_port        = 80
    to_port          = 80
    protocol         = "tcp"
    cidr_blocks      = ["0.0.0.0/0"]
    ipv6_cidr_blocks = ["::/0"]
  }

  ingress {

    from_port        = 443
    to_port          = 443
    protocol         = "tcp"
    cidr_blocks      = ["0.0.0.0/0"]
    ipv6_cidr_blocks = ["::/0"]
  }
  ingress {

    from_port       = 22
    to_port         = 22
    protocol        = "tcp"
    security_groups = [aws_security_group.bastion.id]
  }


  egress {
    from_port        = 0
    to_port          = 0
    protocol         = "-1"
    cidr_blocks      = ["0.0.0.0/0"]
    ipv6_cidr_blocks = ["::/0"]
  }
  tags = {
    "Name" = "${var.project_name}-${var.project_environment}-frontend"
  }
  lifecycle {
    create_before_destroy = true
  }
}

# creating sg for db

resource "aws_security_group" "backend" {
  name_prefix = "${var.project_name}-${var.project_environment}-backend"
  description = "allow ssh, mysql"
  vpc_id      = aws_vpc.main.id
  ingress {

    from_port       = 22
    to_port         = 22
    protocol        = "tcp"
    security_groups = [aws_security_group.bastion.id]
  }
  ingress {

    from_port       = 3306
    to_port         = 3306
    protocol        = "tcp"
    security_groups = [aws_security_group.frontend.id]
  }
  egress {
    from_port        = 0
    to_port          = 0
    protocol         = "-1"
    cidr_blocks      = ["0.0.0.0/0"]
    ipv6_cidr_blocks = ["::/0"]
  }
  tags = {
    "Name" = "${var.project_name}-${var.project_environment}-backend"
  }
  lifecycle {
    create_before_destroy = true
  }
}
##Creation of Key pair and download to local machine

resource "tls_private_key" "rsa" {
  algorithm = "RSA"
  rsa_bits  = 4096
}

resource "aws_key_pair" "vpckey" {

  key_name   = "${var.project_name}-${var.project_environment}-key"
  public_key = tls_private_key.rsa.public_key_openssh
  tags = {
    "Name" = "${var.project_name}-${var.project_environment}",
  }

}
resource "local_file" "tf-key" {
  content  = tls_private_key.rsa.private_key_pem
  filename = "${var.project_name}-${var.project_environment}-key.pem"
}

#creating frontend server

resource "aws_instance" "frontend" {

  ami                    = var.ami_id
  instance_type          = var.instance_type
  key_name               = aws_key_pair.vpckey.id
  vpc_security_group_ids = [aws_security_group.frontend.id]
  subnet_id              = aws_subnet.public_subnets[0].id
  user_data              = file("userdata.sh")
  tags = {
    "Name" = "${var.project_name}-${var.project_environment}-frontend"
  }
}

#creating backend server
resource "aws_instance" "backend" {

  ami                    = var.ami_id
  instance_type          = var.instance_type
  key_name               = aws_key_pair.vpckey.id
  vpc_security_group_ids = [aws_security_group.backend.id]
  subnet_id              = aws_subnet.private_subnets[0].id
  user_data              = file("db.sh")
  tags = {
    "Name" = "${var.project_name}-${var.project_environment}-backend"
  }
}

#creating bastion server

resource "aws_instance" "bastion" {

  ami                    = var.ami_id
  instance_type          = var.instance_type
  key_name               = aws_key_pair.vpckey.id
  vpc_security_group_ids = [aws_security_group.bastion.id]
  subnet_id              = aws_subnet.public_subnets[1].id
  tags = {
    "Name" = "${var.project_name}-${var.project_environment}-bastion"
  }
}
-----------------------------------------------------------------------------------------------------------------------
# output.tf:

output "frontend_pubip" {
  value = aws_instance.frontend.public_ip
}
output "frontend_privateip" {
  value = aws_instance.frontend.private_ip
}
output "backend_pubip" {
  value = aws_instance.backend.public_ip
}
output "backend_privateip" {
  value = aws_instance.backend.private_ip
}
output "bastion_private_ip" {
  value = aws_instance.bastion.private_ip
}
output "range_of_pub1" {
value = aws_subnet.public_subnets[0].cidr_block
}
 
output "range_of_pub2" {
value = aws_subnet.public_subnets[1].cidr_block
}
 
output "range_of_pub3" {
value = aws_subnet.public_subnets[2].cidr_block
}
output "range_of_pri1" {
value = aws_subnet.private_subnets[0].cidr_block
}
output "range_of_pri2" {
value = aws_subnet.private_subnets[1].cidr_block
}
output "range_of_pri3" {
value = aws_subnet.private_subnets[2].cidr_block
}
------------------------------------------------------------------------------------------------------------------
 
Outputs:
 

backend_privateip = "172.16.100.204"
backend_pubip = "43.205.110.123"
bastion_private_ip = "172.16.35.62"
frontend_privateip = "172.16.1.92"
frontend_pubip = "65.1.65.225"
range_of_pri1 = "172.16.96.0/19"
range_of_pri2 = "172.16.128.0/19"
range_of_pri3 = "172.16.160.0/19"
range_of_pub1 = "172.16.0.0/19"
range_of_pub2 = "172.16.32.0/19"
range_of_pub3 = "172.16.64.0/19"

